define(function (require, exports, module) {
    'use strict';
  
    var LanguageManager = brackets.getModule("language/LanguageManager");
    var AppInit         = brackets.getModule("utils/AppInit");
    var ExtensionUtils  = brackets.getModule("utils/ExtensionUtils");
    var FileSystem      = brackets.getModule("filesystem/FileSystem");
    var FileUtils       = brackets.getModule("file/FileUtils");
    var CodeHintManager = brackets.getModule("editor/CodeHintManager");

    var robot = require("./robot");
    var KeywordUtils = require("./keyword");
    var Hints = require("./hints");

    var libraries = []; // list of dictionaries, one per library

    function initializeUI() {
        // do some mode-specific initialization that can only be done after 
        // an editor has been instantiated.
        var EditorManager   = brackets.getModule("editor/EditorManager");
        var DocumentManager = brackets.getModule("document/DocumentManager");
        var editor = EditorManager.getCurrentFullEditor()

        if (editor.getModeForDocument() === "robot") {
            var cm = editor ? editor._codeMirror : null;
            if (cm && (typeof editor.initialized === 'undefined' || !editor.initialized)) {
                // I should probably be using the brackets manager APIs to
                // do this...
                var extraKeys = cm.getOption('extraKeys');
                extraKeys.Tab = robot.on_tab;
                cm.addOverlay(robot.overlay_mode());
                editor.initialized = true;
            }
        }
    }

    function initializeDoc() {
        // this asynchronously fill in the "libraries" object
        // with data from xml files generated by libdoc

        var moduleDocDir = ExtensionUtils.getModulePath(module, "doc/")
        // color me impressed! On my mac this takes only a smidge over 1ms
        FileSystem.getDirectoryForPath(moduleDocDir).getContents(function (err, contents) {
            if (err) {
                console.log("Error getting doc contents:");
                console.log("Looking for " + moduleDocDir);
                console.log("error:", err);
            }
            for (var i = 0; i < contents.length; i++) {
                var path = moduleDocDir + contents[i].name
                var f = FileSystem.getFileForPath(path);
                var data = FileUtils.readAsText(f).done(function(text, readTimestamp) {
                    var $xml = $($.parseXML(text));
                    var $spec = $xml.find("keywordspec");
                    var doc = $spec.find("doc").text();
                    var lib = new KeywordUtils.KeywordLibrary(path, $spec.attr("name"), doc);
                    $xml.find('kw').each(function(index) {
                        var args = [];
                        var name = $(this).attr("name");
                        var doc = $(this).find("doc").text();
                        $(this).find("arg").each(function(index) {
                            args.push($(this).text());
                        });
                        lib.add_keyword(name, args, doc);
                    });
                    libraries.push(lib);
                });
            }
        });
    }


    AppInit.appReady(function () {
        var DocumentManager = brackets.getModule("document/DocumentManager");
        
        // the event is *not* fired for the initial document, so 
        // we have to call it directly at startup.
        $(DocumentManager).on("currentDocumentChange", initializeUI);
        initializeUI();
        initializeDoc();
    });

    // see https://github.com/adobe/brackets/wiki/New-Code-Hinting-API-Proposal
    CodeHintManager.registerHintProvider(new Hints.HintProvider(libraries), ["robot"], 1);

    var cm = brackets.getModule("thirdparty/CodeMirror2/lib/codemirror") ;

    cm.defineMode("robot-variable", robot.overlay_mode);
    cm.defineMode("robot", robot.base_mode);
    cm.defineMIME("text/x-robot", "robot");
    cm.registerHelper("fold", "robot", robot.rangeFinder);

    LanguageManager.defineLanguage("robot", {
      name: "robot",
      mode: "robot",
      fileExtensions: ["robot"],
      lineComment: ["#"]
    });
});


